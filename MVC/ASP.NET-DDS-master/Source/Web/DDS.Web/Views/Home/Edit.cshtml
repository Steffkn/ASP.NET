@model DDS.Web.ViewModels.Shared.DisplayDiplomaViewModel
@{
    ViewBag.Title = "Редактиране";
}

<div class="row">
    <div class="col-md-8">
        @using (Html.BeginForm("Edit", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            <h3>Можете да въведете промени по дипломата преди да потвърдите</h3>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "col-xs-3 control-label" })
                <div class="col-xs-9">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-xs-3 control-label" })
                <div class="col-xs-9">
                    @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control", rows = "3" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ExperimentalPart, htmlAttributes: new { @class = "col-xs-3 control-label" })
                <div class="col-xs-9">
                    @Html.EditorFor(model => model.ExperimentalPart, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ExperimentalPart, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="divlist" class="form-group">
                <div class="col-xs-3">
                    @Html.LabelFor(model => model.ContentCSV, htmlAttributes: new { @class = "control-label" })
                    <input id="btnAdd" type="button" value="Добави" onclick="AddRow();" class="btn-xs btn-success" />
                </div>
                    <div class="contentBoxes col-xs-9">
                    @{var index = 0;}
                    @if (Model != null)
                    {
                        foreach (var item in Model.ContentCSV)
                        {
                            @Html.TextBox("ContentCSV[" + index.ToString() + "]", item, new { @class = "form-control" })
                            index++;
                        }
                    }
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Технологии", htmlAttributes: new { @class = "col-xs-3 control-label" })
                <div class="col-xs-9">
                    @Html.DropDownListFor(model => model.TagsNames, Enumerable.Empty<SelectListItem>(),
                            htmlAttributes: new { @class = "form-control", multiple = "multiple", @id = "tagSelector" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-3 col-xs-9">
                    <input type="submit" value="Потвърди" class="btn btn-primary" />
                    @Html.ActionLink("Отмени", "Doplomas", null, htmlAttributes: new { @class = "btn btn-default" })
                </div>
            </div>
                        }
    </div>
</div>

@section scripts{
    <script type="text/javascript">

        window.onload = function () {
            $(document).ready(function () {
                var pageSize = 20;
                var optionListUrl = '@Url.Action("GetAllTags", "Home")';

                //Method which is to be called for populating options in dropdown //dynamically
                $('#tagSelector').select2(
                {
                    ajax: {
                        delay: 150,
                        url: optionListUrl,
                        dataType: 'json',
                        data: function (params) {
                            params.page = params.page || 1;
                            return {
                                searchTerm: params.term,
                                pageSize: pageSize,
                                pageNumber: params.page
                            };
                        },

                        processResults: function (data, params) {
                            params.page = params.page || 1;
                            return {
                                results: data.Results,
                                pagination: {
                                    more: (params.page * pageSize) < data.Total
                                }
                            };
                        }
                    },
                    placeholder: "-- Избери таг --",
                    tags: true,
                    tokenSeparators: [',', ' '],
                    minimumInputLength: 0,
                    allowClear: true,
                });
            });
        }

        function AddRow() {
            var lastTBox = $('#divlist :last-child.form-control');
            var tbName = lastTBox.attr('name');
            var index = 0;
            if (tbName != null && tbName.length > 0) {
                index = tbName.split('ContentCSV[')[1].replace(']', '');
                index++;
            }
            var box = $("<input>");
            box.attr("id", "ContentCSV[" + index + "]");
            box.attr("name", "ContentCSV[" + index + "]");
            box.attr("class", "form-control");

            $('#divlist .contentBoxes').append(box);
        };
    </script>
}
